# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@bazel_skylib//rules:expand_template.bzl", "expand_template")

package(features = ["no_copts_tokenization"])

bool_flag(
    name = "use_mbedtls",
    build_setting_default = False,
)

config_setting(
    name = "use_mbedtls_setting",
    flag_values = {":use_mbedtls": "true"},
)

bool_flag(
    name = "http_only",
    build_setting_default = True,
)

config_setting(
    name = "http_only_setting",
    flag_values = {":http_only": "true"},
)

_ENABLED_SETTINGS_WINDOWS = [
    "HAVE__FSEEKI64",
    "HAVE_IO_H",
    "HAVE_IOCTLSOCKET",
    "HAVE_IOCTLSOCKET_FIONBIO",
    "USE_SCHANNEL",
    "USE_WINDOWS_SSPI",
    "USE_WIN32_IDN",
]

_ENABLED_SETTINGS_LINUX = [
    "HAVE_LINUX_TCP_H",
]

_ENABLED_SETTINGS_MACOS = [
    "HAVE_FSETXATTR_6",
]

_DISABLED_SETTINGS_MACOS = [
    "HAVE_FSETXATTR_5",
    "HAVE_GETHOSTBYNAME_R",
    "HAVE_GETHOSTBYNAME_R_3",
    "HAVE_GETHOSTBYNAME_R_5",
    "HAVE_GETHOSTBYNAME_R_6",
    "HAVE_POLL_FINE",
]

_DISABLED_SETTINGS_WINDOWS = [
    "HAVE_ARC4RANDOM",
    "HAVE_ARPA_INET_H",
    "HAVE_ATOMIC",
    "HAVE_BASENAME",
    "HAVE_BOOL_T",
    "HAVE_STRINGS_H",
    "HAVE_BUILTIN_AVAILABLE",
    "HAVE_CLOCK_GETTIME_MONOTONIC",
    "HAVE_CLOCK_GETTIME_MONOTONIC_RAW",
    "HAVE_FSETXATTR_5",
    "HAVE_DECL_FSEEKO",
    "HAVE_FCNTL",
    "HAVE_FCNTL_O_NONBLOCK",
    "HAVE_FNMATCH",
    "HAVE_FSEEKO",
    "HAVE_FTRUNCATE",
    "HAVE_GETEUID",
    "HAVE_IF_NAMETOINDEX",
    "HAVE_GETPWUID",
    "HAVE_GETHOSTBYNAME_R",
    "HAVE_SUSECONDS_T",
    "HAVE_GETHOSTBYNAME_R_3",
    "HAVE_GETHOSTBYNAME_R_5",
    "HAVE_GETHOSTBYNAME_R_6",
    "HAVE_GETPWUID_R",
    "HAVE_IOCTL_FIONBIO",
    "HAVE_IOCTL_SIOCGIFADDR",
    "HAVE_GETRLIMIT",
    "HAVE_GETTIMEOFDAY",
    "HAVE_GETIFADDRS",
    "HAVE_IFADDRS_H",
    "HAVE_LIBGEN_H",
    "HAVE_UNISTD_H",
    "HAVE_MSG_NOSIGNAL",
    "HAVE_NETDB_H",
    "HAVE_NET_IF_H",
    "HAVE_INET_NTOP",
    "HAVE_LBER_H",
    "HAVE_PIPE",
    "HAVE_GETPPID",
    "HAVE_GMTIME_R",
    "HAVE_SENDMSG",
    "HAVE_SA_FAMILY_T",
    "HAVE_INET_PTON",
    "HAVE_LDAP_SSL",
    "HAVE_LDAP_H",
    "HAVE_NETINET_IN_H",
    "HAVE_NETINET_TCP_H",
    "HAVE_LDAP_URL_PARSE",
    "HAVE_SIGACTION",
    "HAVE_SIGINTERRUPT",
    "HAVE_POLL_FINE",
    "HAVE_POLL_H",
    "HAVE_POSIX_STRERROR_R",
    "HAVE_NETINET_UDP_H",
    "HAVE_SCHED_YIELD",
    "HAVE_PWD_H",
    "HAVE_FSETXATTR",
    "HAVE_SIGSETJMP",
    "HAVE_SETRLIMIT",
    "HAVE_STDATOMIC_H",
    "HAVE_STDBOOL_H",
    "HAVE_SOCKETPAIR",
    "HAVE_STRTOK_R",
    "HAVE_STRCASECMP",
    "HAVE_SYS_WAIT_H",
    "HAVE_SYS_IOCTL_H",
    "HAVE_TERMIOS_H",
    "HAVE_STRERROR_R",
    "HAVE_STRTOLL",
    "HAVE_SYS_PARAM_H",
    "HAVE_SYS_POLL_H",
    "HAVE_SYS_SELECT_H",
    "HAVE_SYS_SOCKET_H",
    "HAVE_SYS_RESOURCE_H",
    "HAVE_SYS_UN_H",
    "HAVE_UTIME_H",
    "HAVE_UTIMES",
    "HAVE_WRITABLE_ARGV",
    "USE_UNIX_SOCKETS",
    "USE_THREADS_POSIX",
    "HAVE_MACH_ABSOLUTE_TIME",
]

_ENABLED_SETTINGS = [
    "HAVE_STRINGS_H",
    "CURL_DISABLE_LDAP",
    "CURL_DISABLE_OPENSSL_AUTO_LOAD_CONFIG",
    "ENABLE_IPV6",
    "HAVE_ALARM",
    "HAVE_ARC4RANDOM",
    "HAVE_ARPA_INET_H",
    "HAVE_ATOMIC",
    "HAVE_BASENAME",
    "HAVE_BOOL_T",
    "HAVE_BUILTIN_AVAILABLE",
    "HAVE_CLOCK_GETTIME_MONOTONIC",
    "HAVE_CLOCK_GETTIME_MONOTONIC_RAW",
    "HAVE_DECL_FSEEKO",
    "HAVE_FCNTL",
    "HAVE_FCNTL_H",
    "HAVE_FCNTL_O_NONBLOCK",
    "HAVE_FNMATCH",
    "HAVE_FREEADDRINFO",
    "HAVE_FSEEKO",
    "HAVE_FSETXATTR",
    "HAVE_FSETXATTR_5",
    "HAVE_FTRUNCATE",
    "HAVE_GETADDRINFO",
    "HAVE_GETADDRINFO_THREADSAFE",
    "HAVE_GETEUID",
    "HAVE_GETHOSTBYNAME_R",
    "HAVE_GETHOSTBYNAME_R_3",
    "HAVE_GETHOSTBYNAME_R_5",
    "HAVE_GETHOSTBYNAME_R_6",
    "HAVE_GETHOSTNAME",
    "HAVE_GETIFADDRS",
    "HAVE_GETPEERNAME",
    "HAVE_GETPPID",
    "HAVE_GETPWUID",
    "HAVE_GETPWUID_R",
    "HAVE_GETRLIMIT",
    "HAVE_GETSOCKNAME",
    "HAVE_GETTIMEOFDAY",
    "HAVE_GMTIME_R",
    "HAVE_IF_NAMETOINDEX",
    "HAVE_IFADDRS_H",
    "HAVE_INET_NTOP",
    "HAVE_INET_PTON",
    "HAVE_IOCTL_FIONBIO",
    "HAVE_IOCTL_SIOCGIFADDR",
    "HAVE_LBER_H",
    "HAVE_LDAP_H",
    "HAVE_LDAP_SSL",
    "HAVE_LDAP_URL_PARSE",
    "HAVE_LIBGEN_H",
    "HAVE_LOCALE_H",
    "HAVE_LONGLONG",
    "HAVE_MACH_ABSOLUTE_TIME",
    "HAVE_MEMRCHR",
    "HAVE_MSG_NOSIGNAL",
    "HAVE_NET_IF_H",
    "HAVE_NETDB_H",
    "HAVE_NETINET_IN_H",
    "HAVE_NETINET_TCP_H",
    "HAVE_NETINET_UDP_H",
    "HAVE_PIPE",
    "HAVE_POLL_FINE",
    "HAVE_POLL_H",
    "HAVE_POSIX_STRERROR_R",
    "HAVE_PTHREAD_H",
    "HAVE_PWD_H",
    "HAVE_RECV",
    "HAVE_SA_FAMILY_T",
    "HAVE_SCHED_YIELD",
    "HAVE_SELECT",
    "HAVE_SEND",
    "HAVE_SENDMSG",
    "HAVE_SETLOCALE",
    "HAVE_SETMODE",
    "HAVE_SETRLIMIT",
    "HAVE_SIGACTION",
    "HAVE_SIGINTERRUPT",
    "HAVE_SIGNAL",
    "HAVE_SIGSETJMP",
    "HAVE_SNPRINTF",
    "HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID",
    "HAVE_SOCKET",
    "HAVE_SOCKETPAIR",
    "HAVE_STDATOMIC_H",
    "HAVE_STDBOOL_H",
    "HAVE_STRCASECMP",
    "HAVE_STRDUP",
    "HAVE_STRERROR_R",
    "HAVE_STRTOK_R",
    "HAVE_STRTOLL",
    "HAVE_STRUCT_SOCKADDR_STORAGE",
    "HAVE_STRUCT_TIMEVAL",
    "HAVE_SUSECONDS_T",
    "HAVE_SYS_IOCTL_H",
    "HAVE_SYS_PARAM_H",
    "HAVE_SYS_POLL_H",
    "HAVE_SYS_RESOURCE_H",
    "HAVE_SYS_SELECT_H",
    "HAVE_SYS_SOCKET_H",
    "HAVE_SYS_STAT_H",
    "HAVE_SYS_TIME_H",
    "HAVE_SYS_TYPES_H",
    "HAVE_SYS_UN_H",
    "HAVE_SYS_WAIT_H",
    "HAVE_TERMIOS_H",
    "HAVE_UNISTD_H",
    "HAVE_UTIME",
    "HAVE_UTIME_H",
    "HAVE_UTIMES",
    "HAVE_WRITABLE_ARGV",
    "STDC_HEADERS",
    "USE_THREADS_POSIX",
    "USE_UNIX_SOCKETS",
]

_DISABLED_SETTINGS = [
    "_LARGE_FILES",
    "_THREAD_SAFE",
    "const",
    "CURL_CA_FALLBACK",
    "CURL_DEFAULT_SSL_BACKEND",
    "CURL_DISABLE_ALTSVC",
    "CURL_DISABLE_AWS",
    "CURL_DISABLE_BASIC_AUTH",
    "CURL_DISABLE_BEARER_AUTH",
    "CURL_DISABLE_BINDLOCAL",
    "CURL_DISABLE_COOKIES",
    "CURL_DISABLE_DICT",
    "CURL_DISABLE_DIGEST_AUTH",
    "CURL_DISABLE_DOH",
    "CURL_DISABLE_FILE",
    "CURL_DISABLE_FORM_API",
    "CURL_DISABLE_FTP",
    "CURL_DISABLE_GETOPTIONS",
    "CURL_DISABLE_GOPHER",
    "CURL_DISABLE_HEADERS_API",
    "CURL_DISABLE_HSTS",
    "CURL_DISABLE_HTTP",
    "CURL_DISABLE_IMAP",
    "CURL_DISABLE_KERBEROS_AUTH",
    "CURL_DISABLE_LDAPS",
    "CURL_DISABLE_LIBCURL_OPTION",
    "CURL_DISABLE_MIME",
    "CURL_DISABLE_MQTT",
    "CURL_DISABLE_NEGOTIATE_AUTH",
    "CURL_DISABLE_NETRC",
    "CURL_DISABLE_NTLM",
    "CURL_DISABLE_PARSEDATE",
    "CURL_DISABLE_POP3",
    "CURL_DISABLE_PROGRESS_METER",
    "CURL_DISABLE_PROXY",
    "CURL_DISABLE_RTSP",
    "CURL_DISABLE_SMB",
    "CURL_DISABLE_SMTP",
    "CURL_DISABLE_SOCKETPAIR",
    "CURL_DISABLE_TELNET",
    "CURL_DISABLE_TFTP",
    "CURL_DISABLE_VERBOSE_STRINGS",
    "CURL_WITH_MULTI_SSL",
    "HAVE__FSEEKI64",
    "HAVE_ADDRESS_FAMILY",
    "HAVE_BROTLI",
    "HAVE_FSETXATTR_6",
    "HAVE_GETPASS_R",
    "HAVE_GLIBC_STRERROR_R",
    "HAVE_GNUTLS_SRP",
    "HAVE_GSSAPI",
    "HAVE_GSSAPI_GSSAPI_GENERIC_H",
    "HAVE_GSSAPI_GSSAPI_H",
    "HAVE_GSSAPI_GSSAPI_KRB5_H",
    "HAVE_GSSGNU",
    "HAVE_IDN2_H",
    "HAVE_IDNA_STRERROR",
    "HAVE_IO_H",
    "HAVE_IOCTLSOCKET",
    "HAVE_IOCTLSOCKET_CAMEL",
    "HAVE_IOCTLSOCKET_CAMEL_FIONBIO",
    "HAVE_IOCTLSOCKET_FIONBIO",
    "HAVE_LDAP_SSL_H",
    "HAVE_LIBIDN2",
    "HAVE_LIBSOCKET",
    "HAVE_LIBSSH2",
    "HAVE_LIBZ",  # TODO: Enable zlib support
    "HAVE_LINUX_TCP_H",
    "HAVE_OLD_GSSMIT",
    "HAVE_OPENSSL_SRP",
    "HAVE_QUICHE_CONN_SET_QLOG_FD",
    "HAVE_SETSOCKOPT_SO_NONBLOCK",
    "HAVE_SSL_SET0_WBIO",
    "HAVE_STRCMPI",
    "HAVE_STROPTS_H",
    "HAVE_SYS_FILIO_H",
    "HAVE_SYS_SOCKIO_H",
    "HAVE_SYS_UTIME_H",
    "HAVE_TERMIO_H",
    "HAVE_ZSTD",  # TODO: Enable zstd support
    "in_addr_t",
    "NEED_LBER_H",
    "NEED_MALLOC_H",
    "NEED_REENTRANT",
    "PACKAGE",
    "PACKAGE_BUGREPORT",
    "PACKAGE_NAME",
    "PACKAGE_STRING",
    "PACKAGE_VERSION",
    "size_t",
    "ssize_t",
    "USE_ARES",
    "USE_BEARSSL",
    "USE_GNUTLS",
    "USE_LIBPSL",
    "USE_LIBSSH",
    "USE_LIBSSH2",
    "USE_MSH3",
    "USE_NGHTTP2",
    "USE_NGHTTP3",
    "USE_NGTCP2",
    "USE_OPENLDAP",
    "USE_OPENSSL",
    "USE_OPENSSL_QUIC",
    "USE_QUICHE",
    "USE_SCHANNEL",
    "USE_SECTRANSP",
    "USE_THREADS_WIN32",
    "USE_TLS_SRP",
    "USE_WEBSOCKETS",
    "USE_WIN32_CRYPTO",
    "USE_WIN32_IDN",
    "USE_WIN32_LARGE_FILES",
    "USE_WIN32_LDAP",
    "USE_WINDOWS_SSPI",
    "USE_WOLFSSL",
    "VERSION",
]

expand_template(
    name = "curl_config",
    out = "lib/curl_config.h",
    substitutions = {
        '#cmakedefine CURL_DEFAULT_SSL_BACKEND "${CURL_DEFAULT_SSL_BACKEND}"': "/* undef CURL_DEFAULT_SSL_BACKEND */",
    } + select({
        "@platforms//os:macos": {
            "CURL_CA_BUNDLE": "\"/etc/ssl/cert.pem\"",
            "CURL_CA_PATH": "\"/etc/ssl/cert.pem\"",
        },
    }),
    template = "lib/curl_config.h.cmake",
)

_BASE_CURL_COPTS = [
    "SIZEOF_CURL_OFF_T=8",
    "SIZEOF_INT=4",
    "SIZEOF_LONG=8",
    "SIZEOF_OFF_T=8",
    "SIZEOF_SHORT=2",
    "SIZEOF_SIZE_T=8",
    "SIZEOF_TIME_T=8",
]

cc_library(
    name = "curl",
    srcs = glob([
        "lib/**/*.c",
        "lib/**/*.h",
    ]),
    hdrs = glob(["include/curl/*.h"]),
    copts = select({
        "@platforms//os:windows": [
            "/DWIN32",
        ],
        "@platforms//os:macos": _BASE_CURL_COPTS + [
            "-DCURL_CA_BUNDLE=\"/etc/ssl/cert.pem\"",
        ],
        "//conditions:default": _BASE_CURL_COPTS + [
        ],
    }) + [
        "-DOS=\"os\"",
    ],
    defines = [
        "BUILDING_LIBCURL",
        "CURL_STATICLIB",
    ],
    includes = [
        "include",
        "lib",
    ],
    linkopts = select({
        "@platforms//os:windows": [
            "-DEFAULTLIB:ws2_32.lib",
            "-DEFAULTLIB:advapi32.lib",
            "-DEFAULTLIB:crypt32.lib",
            "-DEFAULTLIB:Normaliz.lib",
        ],
        "@platforms//os:macos": [
            "-Wl,-framework,SystemConfiguration",
            "-lpthread",
        ],
        "//conditions:default": [
            "-lpthread",
        ],
    }),
    local_defines = select({
        ":use_mbedtls_setting": ["USE_MBEDTLS"],
        "//conditions:default": [],
    }) + select({
        ":http_only_setting": ["HTTP_ONLY"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = select({
        ":use_mbedtls_setting": ["@mbedtls"],
        "//conditions:default": [],
    }),
)

cc_binary(
    name = "linktest",
    linkopts = select({
        "@platforms//os:macos": ["-all_load"],
        "//conditions:default": [],
    }),
    linkshared = True,
    visibility = ["//visibility:private"],
    deps = [":curl"],
)
